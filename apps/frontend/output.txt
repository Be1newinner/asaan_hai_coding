===== BEGIN ./next-env.d.ts =====
/// <reference types="next" />
/// <reference types="next/image-types/global" />
/// <reference path="./.next/types/routes.d.ts" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/app/api-reference/config/typescript for more information.

===== END ./next-env.d.ts =====

===== BEGIN ./.eslintignore =====
src/components/ui/
tailwind.config.ts
===== END ./.eslintignore =====

===== BEGIN ./components.json =====
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "default",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "app/globals.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}
===== END ./components.json =====

===== BEGIN ./postcss.config.mjs =====
const config = {
  plugins: ["@tailwindcss/postcss"],
};

export default config;

===== END ./postcss.config.mjs =====

===== BEGIN ./next.config.ts =====
import type { NextConfig } from "next";
import createMDX from "@next/mdx";

// Turbopack requires plugin names as strings and JSON-serializable options
const mdxOptions = {
  // If you need GFM tables/footnotes etc, use string form too:
  // remarkPlugins: [["remark-gfm", { /* gfm opts */ }]],
  remarkPlugins: ["remark-gfm"],
  rehypePlugins: [
    ["rehype-pretty-code", { theme: "solarized-dark", keepBackground: false }],
  ],
};

const withMDX = createMDX({
  extension: /\.mdx?$/,
  options: mdxOptions,
});

/** @type {import('next').NextConfig} */
const nextConfig: NextConfig = {
  pageExtensions: ["ts", "tsx", "md", "mdx"],
  // Ensure JS loader path is used so string plugins work
  experimental: { mdxRs: false },
  reactStrictMode: true,
  eslint: { ignoreDuringBuilds: true },
  // Optional: if TS complains about types for plugin tuples, add a ts-ignore:
  // (Known mismatch while @next/mdx types catch up)
  // @ts-ignore
};

export default withMDX(nextConfig);

===== END ./next.config.ts =====

===== BEGIN ./AI_RULES.md =====
# AI Rules for ASAAN HAI CODING Application

This document outlines the core technologies and best practices for developing the ASAAN HAI CODING application.

## Tech Stack Overview

*   **Framework:** Next.js 15 with the App Router for building server-rendered and client-side React applications.
*   **Language:** TypeScript for enhanced code quality, type safety, and developer experience.
*   **Styling:** Tailwind CSS for all styling, emphasizing a utility-first approach for responsive and consistent designs.
*   **UI Components:** shadcn/ui, built on Radix UI, for a robust and accessible set of pre-built UI components.
*   **HTTP Client:** Axios for making API requests to the backend services.
*   **Form Management:** React Hook Form for efficient and flexible form handling, integrated with Zod for schema validation.
*   **Icons:** Lucide React for a comprehensive and customizable icon library.
*   **Notifications:** `sonner` and shadcn/ui's `useToast` for elegant and user-friendly toast notifications.
*   **Date Handling:** `date-fns` for date manipulation and `react-day-picker` for interactive date selection.
*   **Theming:** `next-themes` for managing dark and light mode functionality.

## Library Usage Rules

To maintain consistency, performance, and maintainability, please adhere to the following guidelines when using libraries:

*   **Next.js:**
    *   Always use Next.js for page routing, data fetching (server components where appropriate), and API routes.
    *   Organize pages within the `src/app/` directory following the App Router conventions.
*   **TypeScript:**
    *   All new files and components must be written in TypeScript (`.ts` or `.tsx`).
    *   Strive for strong typing and leverage TypeScript's features to catch errors early.
*   **Tailwind CSS:**
    *   Apply styling primarily using Tailwind CSS utility classes.
    *   Avoid inline styles or custom CSS files unless absolutely necessary for complex, unique components not covered by Tailwind.
    *   Ensure designs are responsive by utilizing Tailwind's responsive prefixes (e.g., `sm:`, `md:`, `lg:`).
*   **shadcn/ui & Radix UI:**
    *   Utilize existing shadcn/ui components for common UI elements (buttons, cards, inputs, dialogs, etc.).
    *   Do NOT modify shadcn/ui component files directly. If a component needs significant customization, create a new component in `src/components/` and compose or extend the shadcn/ui component, applying custom Tailwind styles.
*   **Lucide React:**
    *   Use icons from `lucide-react` for all graphical symbols in the UI.
    *   Import icons directly from `lucide-react` and apply Tailwind classes for sizing and coloring.
*   **Axios:**
    *   All HTTP requests to the backend API should be made using the `api` instance from `src/services/api.ts`.
    *   Centralize API calls within the `src/services/` directory.
*   **React Hook Form & Zod:**
    *   For any forms, use `react-hook-form` for state management and validation.
    *   Define form schemas using `zod` and integrate them with `react-hook-form` using `@hookform/resolvers`.
*   **Notifications (Toasts):**
    *   Use the `useToast` hook (from `src/hooks/use-toast.ts`, which leverages shadcn/ui's toast system) for displaying temporary, non-intrusive messages to the user.
    *   For more persistent or interactive notifications, consider `sonner`.
*   **Component Structure:**
    *   Create a new file for every new component or hook, no matter how small.
    *   Place components in `src/components/` and pages in `src/app/`.
    *   Aim for small, focused components (ideally 100 lines of code or less).
*   **Error Handling:**
    *   Do not use `try/catch` blocks for API calls unless specifically requested for a particular feature. Allow errors to bubble up for centralized handling and debugging.
===== END ./AI_RULES.md =====

===== BEGIN ./tailwind.config.ts =====
import type { Config } from "tailwindcss";
import tailwindcssAnimate from "tailwindcss-animate";

const config: Config = {
  darkMode: "class",
  content: [
    "./app/**/*.{ts,tsx,md,mdx}",
    "./pages/**/*.{ts,tsx,md,mdx}",
    "./components/**/*.{ts,tsx,md,mdx}",
    "./src/**/*.{ts,tsx,md,mdx}",
  ],
  theme: {
    container: {
      center: true,
      padding: "2rem",
      screens: {
        "2xl": "1400px",
      },
    },
    extend: {
      colors: {
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        primary: {
          DEFAULT: "hsl(var(--primary))",
          foreground: "hsl(var(--primary-foreground))",
        },
        secondary: {
          DEFAULT: "hsl(var(--secondary))",
          foreground: "hsl(var(--secondary-foreground))",
        },
        destructive: {
          DEFAULT: "hsl(var(--destructive))",
          foreground: "hsl(var(--destructive-foreground))",
        },
        muted: {
          DEFAULT: "hsl(var(--muted))",
          foreground: "hsl(var(--muted-foreground))",
        },
        accent: {
          DEFAULT: "hsl(var(--accent))",
          foreground: "hsl(var(--accent-foreground))",
        },
        popover: {
          DEFAULT: "hsl(var(--popover))",
          foreground: "hsl(var(--popover-foreground))",
        },
        card: {
          DEFAULT: "hsl(var(--card))",
          foreground: "hsl(var(--card-foreground))",
        },
      },
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
      },
      keyframes: {
        "accordion-down": {
          from: { height: "0" },
          to: { height: "var(--radix-accordion-content-height)" },
        },
        "accordion-up": {
          from: { height: "var(--radix-accordion-content-height)" },
          to: { height: "0" },
        },
      },
      animation: {
        "accordion-down": "accordion-down 0.2s ease-out",
        "accordion-up": "accordion-up 0.2s ease-out",
      },
      transitionTimingFunction: {
        standard: "cubic-bezier(0.2, 0, 0, 1)",
      },
      transitionDuration: {
        150: "150ms",
        200: "200ms",
      },
    },
  },
  plugins: [tailwindcssAnimate, require("@tailwindcss/typography")],
} satisfies Config;

export default config;

===== END ./tailwind.config.ts =====

===== BEGIN ./.env =====
NEXT_PUBLIC_API_BASE_URL=https://api.asaanhaicoding.in
===== END ./.env =====

===== BEGIN ./output.txt =====

===== END ./output.txt =====

===== BEGIN ./eslint.config.mjs =====
import { dirname } from "path";
import { fileURLToPath } from "url";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

const eslintConfig = [
  ...compat.extends("next/core-web-vitals", "next/typescript"),
  {
    ignores: [
      "node_modules/**",
      ".next/**",
      "out/**",
      "build/**",
      "next-env.d.ts",
    ],
  },
];

export default eslintConfig;

===== END ./eslint.config.mjs =====

===== BEGIN ./microfrontends.json =====
{
  "$schema": "https://openapi.vercel.sh/microfrontends.json",
  "applications": {
    "asaan-hai-coding-client-frontend": {
      "development": {
        "fallback": "www.asaanhaicoding.in"
      }
    }
  }
}

===== END ./microfrontends.json =====

===== BEGIN ./package.json =====
{
  "name": "asaan_hai_coding",
  "version": "0.1.0",
  "private": true,
  "author": {
    "email": "be1newinner@gmail.com",
    "name": "Vijay Kumar"
  },
  "scripts": {
    "dev": "next dev --turbopack",
    "build": "next build --turbopack",
    "start": "next start",
    "lint": "eslint"
  },
  "dependencies": {
    "@hookform/resolvers": "^3.9.1",
    "@lexical/markdown": "^0.34.0",
    "@lexical/react": "^0.34.0",
    "@lexical/rich-text": "^0.34.0",
    "@next/mdx": "^15.5.0",
    "@radix-ui/react-accordion": "1.2.2",
    "@radix-ui/react-alert-dialog": "1.1.4",
    "@radix-ui/react-aspect-ratio": "1.1.1",
    "@radix-ui/react-avatar": "1.1.2",
    "@radix-ui/react-checkbox": "1.1.3",
    "@radix-ui/react-collapsible": "1.1.2",
    "@radix-ui/react-context-menu": "2.2.4",
    "@radix-ui/react-dialog": "1.1.4",
    "@radix-ui/react-dropdown-menu": "2.1.4",
    "@radix-ui/react-hover-card": "1.1.4",
    "@radix-ui/react-label": "2.1.1",
    "@radix-ui/react-menubar": "1.1.4",
    "@radix-ui/react-navigation-menu": "1.2.3",
    "@radix-ui/react-popover": "1.1.4",
    "@radix-ui/react-progress": "1.1.1",
    "@radix-ui/react-radio-group": "1.2.2",
    "@radix-ui/react-scroll-area": "1.2.2",
    "@radix-ui/react-select": "2.1.4",
    "@radix-ui/react-separator": "1.1.1",
    "@radix-ui/react-slider": "1.2.2",
    "@radix-ui/react-slot": "1.1.1",
    "@radix-ui/react-switch": "1.1.2",
    "@radix-ui/react-tabs": "1.1.2",
    "@radix-ui/react-toast": "1.2.4",
    "@radix-ui/react-toggle": "1.1.1",
    "@radix-ui/react-toggle-group": "1.1.1",
    "@radix-ui/react-tooltip": "1.1.6",
    "@tailwindcss/typography": "^0.5.16",
    "@tanstack/react-query": "^5.85.5",
    "@tsparticles/engine": "^3.9.1",
    "@tsparticles/react": "^3.0.0",
    "@tsparticles/slim": "^3.9.1",
    "autoprefixer": "^10.4.20",
    "axios": "^1.11.0",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "cmdk": "1.0.4",
    "date-fns": "4.1.0",
    "embla-carousel-react": "8.5.1",
    "geist": "^1.3.1",
    "github-markdown-css": "^5.8.1",
    "input-otp": "1.4.1",
    "lexical": "^0.34.0",
    "lucide-react": "^0.454.0",
    "next": "15.5.0",
    "next-themes": "^0.4.4",
    "react": "19.1.0",
    "react-animated-cursor": "^2.11.2",
    "react-day-picker": "9.8.0",
    "react-dom": "19.1.0",
    "react-hook-form": "^7.54.1",
    "react-markdown": "^10.1.0",
    "react-resizable-panels": "^2.1.7",
    "recharts": "2.15.0",
    "rehype-highlight": "^7.0.2",
    "rehype-pretty-code": "^0.14.1",
    "remark-breaks": "^4.0.0",
    "remark-gfm": "^4.0.1",
    "shiki": "^3.11.0",
    "sonner": "^1.7.1",
    "tailwind-merge": "^2.5.5",
    "tailwindcss-animate": "^1.0.7",
    "tsparticles": "^3.9.1",
    "vaul": "^0.9.6",
    "zod": "^3.24.1"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@tailwindcss/postcss": "^4",
    "@tanstack/react-query-devtools": "^5.85.5",
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "eslint": "^9",
    "eslint-config-next": "15.5.0",
    "postcss": "^8.5",
    "tailwindcss": "^4",
    "typescript": "^5"
  }
}

===== END ./package.json =====

===== BEGIN ./README.md =====

===== END ./README.md =====

===== BEGIN ./src/styles/globals.css =====
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer utilities {
  .text-balance {
    text-wrap: balance;
  }
}

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 0 0% 3.9%;
    --card: 0 0% 100%;
    --card-foreground: 0 0% 3.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 0 0% 3.9%;
    --primary: 0 0% 9%;
    --primary-foreground: 0 0% 98%;
    --secondary: 0 0% 96.1%;
    --secondary-foreground: 0 0% 9%;
    --muted: 0 0% 96.1%;
    --muted-foreground: 0 0% 45.1%;
    --accent: 0 0% 96.1%;
    --accent-foreground: 0 0% 9%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 89.8%;
    --input: 0 0% 89.8%;
    --ring: 0 0% 3.9%;
    --chart-1: 12 76% 61%;
    --chart-2: 173 58% 39%;
    --chart-3: 197 37% 24%;
    --chart-4: 43 74% 66%;
    --chart-5: 27 87% 67%;
    --radius: 0.5rem;
    --sidebar-background: 0 0% 98%;
    --sidebar-foreground: 240 5.3% 26.1%;
    --sidebar-primary: 240 5.9% 10%;
    --sidebar-primary-foreground: 0 0% 98%;
    --sidebar-accent: 240 4.8% 95.9%;
    --sidebar-accent-foreground: 240 5.9% 10%;
    --sidebar-border: 220 13% 91%;
    --sidebar-ring: 217.2 91.2% 59.8%;
  }
  .dark {
    --background: 0 0% 3.9%;
    --foreground: 0 0% 98%;
    --card: 0 0% 3.9%;
    --card-foreground: 0 0% 98%;
    --popover: 0 0% 3.9%;
    --popover-foreground: 0 0% 98%;
    --primary: 0 0% 98%;
    --primary-foreground: 0 0% 9%;
    --secondary: 0 0% 14.9%;
    --secondary-foreground: 0 0% 98%;
    --muted: 0 0% 14.9%;
    --muted-foreground: 0 0% 63.9%;
    --accent: 0 0% 14.9%;
    --accent-foreground: 0 0% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 14.9%;
    --input: 0 0% 14.9%;
    --ring: 0 0% 83.1%;
    --chart-1: 220 70% 50%;
    --chart-2: 160 60% 45%;
    --chart-3: 30 80% 55%;
    --chart-4: 280 65% 60%;
    --chart-5: 340 75% 55%;
    --sidebar-background: 240 5.9% 10%;
    --sidebar-foreground: 240 4.8% 95.9%;
    --sidebar-primary: 224.3 76.3% 48%;
    --sidebar-primary-foreground: 0 0% 100%;
    --sidebar-accent: 240 3.7% 15.9%;
    --sidebar-accent-foreground: 240 4.8% 95.9%;
    --sidebar-border: 240 3.7% 15.9%;
    --sidebar-ring: 217.2 91.2% 59.8%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}

===== END ./src/styles/globals.css =====

===== BEGIN ./src/components/Hero.tsx =====
'use client'

import { useEffect, useState } from 'react'
import { Button } from '@/components/ui/button'
import { ArrowRight, Code, Sparkles } from 'lucide-react'
import Link from 'next/link'

export default function Hero() {
  const [mounted, setMounted] = useState(false)

  useEffect(() => {
    setMounted(true)
  }, [])

  return (
    <section className="relative min-h-screen flex items-center justify-center overflow-hidden">
      {/* Content */}
      <div className="relative z-10 text-center px-4 sm:px-6 lg:px-8 max-w-4xl mx-auto">
        <div className="space-y-8">
          <div className="flex items-center justify-center space-x-2 text-blue-400 mb-6">
            <Sparkles className="h-6 w-6" />
            <span className="text-sm font-medium tracking-wide uppercase">Welcome to the Future of Learning</span>
          </div>
          
          <h1 className="text-4xl sm:text-6xl lg:text-7xl font-bold leading-tight">
            <span className="bg-gradient-to-r from-white via-blue-100 to-blue-200 bg-clip-text text-transparent">
              Coding Made
            </span>
            <br />
            <span className="bg-gradient-to-r from-blue-400 via-purple-400 to-blue-500 bg-clip-text text-transparent">
              Simple & Easy
            </span>
          </h1>

          <p className="text-xl sm:text-2xl text-slate-300 max-w-3xl mx-auto leading-relaxed">
            Master programming with our comprehensive tutorials, hands-on projects, and expert guidance. 
            From beginner to advanced, we make coding accessible for everyone.
          </p>

          <div className="flex flex-col sm:flex-row items-center justify-center gap-4 pt-8">
            <Button asChild size="lg" className="bg-blue-600 hover:bg-blue-700 text-white px-8 py-3 text-lg">
              <Link href="/tutorials" className="flex items-center space-x-2">
                <Code className="h-5 w-5" />
                <span>Start Learning</span>
                <ArrowRight className="h-5 w-5" />
              </Link>
            </Button>
            
            <Button asChild variant="outline" size="lg" className="border-slate-600 text-slate-300 hover:bg-slate-800 px-8 py-3 text-lg">
              <Link href="/projects">
                View Projects
              </Link>
            </Button>
          </div>
        </div>
      </div>
    </section>
  )
}
===== END ./src/components/Hero.tsx =====

===== BEGIN ./src/components/theme-provider.tsx =====
'use client'

import * as React from 'react'
import {
  ThemeProvider as NextThemesProvider,
  type ThemeProviderProps,
} from 'next-themes'

export function ThemeProvider({ children, ...props }: ThemeProviderProps) {
  return <NextThemesProvider {...props}>{children}</NextThemesProvider>
}

===== END ./src/components/theme-provider.tsx =====

===== BEGIN ./src/components/TopProjects.tsx =====
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { ExternalLink, Github } from "lucide-react";
import Link from "next/link";
import Image from "next/image";

const featuredProjects = [
  {
    id: 1,
    title: "E-Commerce Platform",
    description:
      "A full-stack e-commerce solution built with Next.js, featuring user authentication, payment integration, and admin dashboard.",
    image: "/placeholder.svg?height=200&width=300&text=E-Commerce+Platform",
    technologies: ["Next.js", "TypeScript", "Tailwind CSS", "Stripe"],
    liveUrl: "#",
    githubUrl: "#",
    slug: "ecommerce-platform",
  },
  {
    id: 2,
    title: "Task Management App",
    description:
      "A collaborative task management application with real-time updates, drag-and-drop functionality, and team collaboration features.",
    image: "/placeholder.svg?height=200&width=300&text=Task+Management+App",
    technologies: ["React", "Node.js", "Socket.io", "MongoDB"],
    liveUrl: "#",
    githubUrl: "#",
    slug: "task-management-app",
  },
  {
    id: 3,
    title: "Weather Dashboard",
    description:
      "A beautiful weather dashboard with location-based forecasts, interactive maps, and detailed weather analytics.",
    image: "/placeholder.svg?height=200&width=300&text=Weather+Dashboard",
    technologies: ["Vue.js", "Python", "FastAPI", "Chart.js"],
    liveUrl: "#",
    githubUrl: "#",
    slug: "weather-dashboard",
  },
];

export default function TopProjects() {
  return (
    <section className="py-20 px-4 sm:px-6 lg:px-8">
      <div className="max-w-7xl mx-auto">
        <div className="text-center mb-16">
          <h2 className="text-3xl sm:text-4xl font-bold mb-4">
            <span className="bg-gradient-to-r from-blue-400 to-purple-400 bg-clip-text text-transparent">
              Featured Projects
            </span>
          </h2>
          <p className="text-xl text-slate-400 max-w-2xl mx-auto">
            Explore our latest and most innovative projects showcasing modern
            web development techniques
          </p>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 mb-12">
          {featuredProjects.map((project) => (
            <Card
              key={project.id}
              className="bg-slate-900 border-slate-800 hover:border-slate-700 transition-all duration-300 group"
            >
              <div className="relative overflow-hidden rounded-t-lg">
                <Image
                  src={project.image || "/placeholder.svg"}
                  alt={project.title}
                  width={300}
                  height={200}
                  className="w-full h-48 object-cover group-hover:scale-105 transition-transform duration-300"
                />
                <div className="absolute inset-0 bg-gradient-to-t from-slate-900/80 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
              </div>

              <CardHeader>
                <CardTitle className="text-white group-hover:text-blue-400 transition-colors">
                  {project.title}
                </CardTitle>
                <CardDescription className="text-slate-400">
                  {project.description}
                </CardDescription>
              </CardHeader>

              <CardContent className="space-y-4">
                <div className="flex flex-wrap gap-2">
                  {project.technologies.map((tech) => (
                    <Badge
                      key={tech}
                      variant="secondary"
                      className="bg-slate-800 text-slate-300"
                    >
                      {tech}
                    </Badge>
                  ))}
                </div>

                <div className="flex items-center justify-between">
                  <div className="flex space-x-2">
                    <Button
                      size="sm"
                      variant="outline"
                      className="border-slate-600 hover:bg-slate-800"
                    >
                      <ExternalLink className="h-4 w-4 mr-1" />
                      Live
                    </Button>
                    <Button
                      size="sm"
                      variant="outline"
                      className="border-slate-600 hover:bg-slate-800"
                    >
                      <Github className="h-4 w-4 mr-1" />
                      Code
                    </Button>
                  </div>
                  <Button
                    asChild
                    size="sm"
                    className="bg-blue-600 hover:bg-blue-700"
                  >
                    <Link href={`/projects/${project.slug}`}>Details</Link>
                  </Button>
                </div>
              </CardContent>
            </Card>
          ))}
        </div>

        <div className="text-center">
          <Button
            asChild
            size="lg"
            variant="outline"
            className="border-slate-600 hover:bg-slate-800"
          >
            <Link href="/projects">View All Projects</Link>
          </Button>
        </div>
      </div>
    </section>
  );
}

===== END ./src/components/TopProjects.tsx =====

===== BEGIN ./src/components/TopTutorials.tsx =====
"use client";

import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Clock, BookOpen } from "lucide-react";
import Link from "next/link";
import Image from "next/image";
import { useQuery } from "@tanstack/react-query";
import { coursesService } from "@/services/courses";
import { titleToSlug } from "@/utils/slug";

export default function TopTutorials() {
  const {
    data: tutorials,
    isLoading,
    error,
  } = useQuery({
    queryKey: ["tutorials"],
    queryFn: () => coursesService.listCourses(),
  });

  if (isLoading) {
    return (
      <section className="py-20 px-4 sm:px-6 lg:px-8 bg-slate-900/30 text-center text-white">
        <p>Loading tutorials...</p>
      </section>
    );
  }

  if (error) {
    return (
      <section className="py-20 px-4 sm:px-6 lg:px-8 bg-slate-900/30 text-center text-red-500">
        <p>Failed to load tutorials: {error.message}</p>
      </section>
    );
  }

  return (
    <section className="py-20 px-4 sm:px-6 lg:px-8 bg-slate-900/30">
      <div className="max-w-7xl mx-auto">
        <div className="text-center mb-16">
          <h2 className="text-3xl sm:text-4xl font-bold mb-4">
            <span className="bg-gradient-to-r from-purple-400 to-pink-400 bg-clip-text text-transparent">
              Popular Tutorials
            </span>
          </h2>
          <p className="text-xl text-slate-400 max-w-2xl mx-auto">
            Step-by-step guides to help you master programming concepts and
            build amazing projects
          </p>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 mb-12">
          {tutorials?.map((tutorial) => (
            <Card
              key={tutorial.id}
              className="bg-slate-900/50 border-slate-800 hover:border-slate-700 transition-all duration-300 group"
            >
              <div className="relative overflow-hidden rounded-t-lg">
                <Image
                  src={tutorial.image_url || "/placeholder.svg"}
                  alt={tutorial.title}
                  width={300}
                  height={200}
                  className="w-full h-48 object-cover group-hover:scale-105 transition-transform duration-300"
                />
                <div className="absolute top-4 left-4">
                  <Badge className="bg-purple-600 hover:bg-purple-700">
                    {tutorial.category || "Uncategorized"}
                  </Badge>
                </div>
              </div>

              <CardHeader>
                <CardTitle className="text-white group-hover:text-purple-400 transition-colors">
                  {tutorial.title}
                </CardTitle>
                <CardDescription className="text-slate-400">
                  {tutorial.description}
                </CardDescription>
              </CardHeader>

              <CardContent className="space-y-4">
                <div className="flex items-center justify-between text-sm text-slate-500">
                  <div className="flex items-center space-x-1">
                    <Clock className="h-4 w-4" />
                    <span>N/A</span>
                  </div>
                  <span>
                    {tutorial.created_at
                      ? new Date(tutorial.created_at).toLocaleDateString()
                      : "N/A"}
                  </span>
                </div>

                <Button
                  asChild
                  className="w-full bg-purple-600 hover:bg-purple-700"
                >
                  <Link
                    href={`/tutorials/${titleToSlug(
                      tutorial.title,
                      tutorial.id
                    )}`}
                    className="flex items-center justify-center space-x-2"
                  >
                    <BookOpen className="h-4 w-4" />
                    <span>Read Tutorial</span>
                  </Link>
                </Button>
              </CardContent>
            </Card>
          ))}
        </div>

        <div className="text-center">
          <Button
            asChild
            size="lg"
            variant="outline"
            className="border-slate-600 hover:bg-slate-800"
          >
            <Link href="/tutorials">View All Tutorials</Link>
          </Button>
        </div>
      </div>
    </section>
  );
}

===== END ./src/components/TopTutorials.tsx =====

===== BEGIN ./src/components/ContactSection.tsx =====
"use client";

import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { MessageSquare, Send } from "lucide-react";
import { useToast } from "@/hooks/use-toast";

export default function ContactSection() {
  const [formData, setFormData] = useState({
    name: "",
    email: "",
    message: "",
  });
  const [isSubmitting, setIsSubmitting] = useState(false);
  const { toast } = useToast();

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsSubmitting(true);

    await new Promise((resolve) => setTimeout(resolve, 1000));

    toast({
      title: "Message sent!",
      description:
        "Thank you for your message. We&apos;ll get back to you soon.",
    });

    setFormData({ name: "", email: "", message: "" });
    setIsSubmitting(false);
  };

  const handleChange = (
    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>
  ) => {
    setFormData((prev) => ({
      ...prev,
      [e.target.name]: e.target.value,
    }));
  };

  return (
    <section className="py-20 px-4 sm:px-6 lg:px-8">
      <div className="max-w-4xl mx-auto">
        <div className="text-center mb-16">
          <h2 className="text-3xl sm:text-4xl font-bold mb-4">
            <span className="bg-gradient-to-r from-green-400 to-blue-400 bg-clip-text text-transparent">
              Get In Touch
            </span>
          </h2>
          <p className="text-xl text-slate-400 max-w-2xl mx-auto">
            Have a question or want to collaborate? We&apos;d love to hear from
            you!
          </p>
        </div>

        <Card className="bg-slate-900/50 border-slate-800">
          <CardHeader className="text-center">
            <CardTitle className="flex items-center justify-center space-x-2 text-2xl">
              <MessageSquare className="h-6 w-6 text-blue-400" />
              <span>Send us a message</span>
            </CardTitle>
            <CardDescription className="text-slate-400">
              Fill out the form below and we&apos;ll get back to you as soon as
              possible.
            </CardDescription>
          </CardHeader>

          <CardContent>
            <form onSubmit={handleSubmit} className="space-y-6">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div className="space-y-2">
                  <label
                    htmlFor="name"
                    className="text-sm font-medium text-slate-300"
                  >
                    Name *
                  </label>
                  <Input
                    id="name"
                    name="name"
                    type="text"
                    required
                    value={formData.name}
                    onChange={handleChange}
                    className="bg-slate-800 border-slate-700 focus:border-blue-500"
                    placeholder="Your full name"
                  />
                </div>

                <div className="space-y-2">
                  <label
                    htmlFor="email"
                    className="text-sm font-medium text-slate-300"
                  >
                    Email *
                  </label>
                  <Input
                    id="email"
                    name="email"
                    type="email"
                    required
                    value={formData.email}
                    onChange={handleChange}
                    className="bg-slate-800 border-slate-700 focus:border-blue-500"
                    placeholder="your.email@example.com"
                  />
                </div>
              </div>

              <div className="space-y-2">
                <label
                  htmlFor="message"
                  className="text-sm font-medium text-slate-300"
                >
                  Message *
                </label>
                <Textarea
                  id="message"
                  name="message"
                  required
                  value={formData.message}
                  onChange={handleChange}
                  rows={6}
                  className="bg-slate-800 border-slate-700 focus:border-blue-500 resize-none"
                  placeholder="Tell us about your project, question, or how we can help you..."
                />
              </div>

              <Button
                type="submit"
                disabled={isSubmitting}
                className="w-full bg-blue-600 hover:bg-blue-700 disabled:opacity-50"
              >
                {isSubmitting ? (
                  <div className="flex items-center space-x-2">
                    <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                    <span>Sending...</span>
                  </div>
                ) : (
                  <div className="flex items-center space-x-2">
                    <Send className="h-4 w-4" />
                    <span>Send Message</span>
                  </div>
                )}
              </Button>
            </form>
          </CardContent>
        </Card>
      </div>
    </section>
  );
}

===== END ./src/components/ContactSection.tsx =====

===== BEGIN ./src/components/UniverseBackground.tsx =====
"use client";
import { useEffect, useMemo, useState } from "react";
import Particles, { initParticlesEngine } from "@tsparticles/react";
import {
  type Container,
  type ISourceOptions,
  MoveDirection,
  OutMode,
} from "@tsparticles/engine";
import { loadSlim } from "@tsparticles/slim";

const App = () => {
  const [init, setInit] = useState(false);

  useEffect(() => {
    initParticlesEngine(async (engine) => {
      await loadSlim(engine);
    }).then(() => {
      setInit(true);
    });
  }, []);

  const particlesLoaded = async (container?: Container): Promise<void> => {
    console.log(container);
  };

  const options: ISourceOptions = useMemo(
    () => ({
      fpsLimit: 120,
      interactivity: {
        events: {
          onClick: {
            enable: true,
            mode: "push",
          },
          onHover: {
            enable: true,
            mode: "repulse",
          },
        },
        modes: {
          push: {
            quantity: 4,
          },
          repulse: {
            distance: 200,
            duration: 0.8,
          },
        },
      },
      particles: {
        color: {
          value: "#ffffff",
        },
        links: {
          color: "#ffffff",
          distance: 130,
          enable: true,
          opacity: 0.5,
          width: 1,
        },
        move: {
          direction: MoveDirection.none,
          enable: true,
          outModes: {
            default: OutMode.out,
          },
          random: false,
          speed: 4,
          straight: false,
        },
        number: {
          density: {
            enable: true,
          },
          value: 80,
        },
        opacity: {
          value: 0.5,
        },
        shape: {
          type: "circle",
        },
        size: {
          value: { min: 1, max: 5 },
        },
      },
      detectRetina: true,
    }),
    []
  );

  if (init) {
    return (
      <Particles
        id="tsparticles"
        particlesLoaded={particlesLoaded}
        options={options}
      />
    );
  }

  return <></>;
};

export default App;

===== END ./src/components/UniverseBackground.tsx =====

===== BEGIN ./src/components/AnimatedCursor.tsx =====
"use client";

import dynamic from "next/dynamic";

const AnimatedCursor = dynamic(() => import("react-animated-cursor"), {
  ssr: true,
});

export default AnimatedCursor;

===== END ./src/components/AnimatedCursor.tsx =====

===== BEGIN ./src/components/course-detail/CourseSectionsAccordion.tsx =====
"use client";

import React from "react";
import {
  Accordion,
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
} from "@/components/ui/accordion";
import CourseLessonItem from "./CourseLessonItem";
import { CourseRead } from "@/types/api";

interface CourseSectionsAccordionProps {
  course: CourseRead;
}

const CourseSectionsAccordion: React.FC<CourseSectionsAccordionProps> = ({
  course,
}) => {
  if (!course.sections || course.sections.length === 0) {
    return (
      <div className="text-center text-muted-foreground py-8">
        No sections available for this course yet.
      </div>
    );
  }

  return (
    <div className="mt-8">
      <h2 className="text-3xl font-bold mb-6 text-foreground">
        Course Curriculum
      </h2>
      <Accordion type="single" collapsible className="w-full">
        {course.sections
          .sort((a, b) => a.section_order - b.section_order)
          .map((section) => (
            <AccordionItem
              key={section.id}
              value={`section-${section.id}`}
              className="border-b border-border"
            >
              <AccordionTrigger className="text-lg font-semibold text-foreground hover:no-underline py-4 px-6 bg-card hover:bg-muted transition-colors duration-200 rounded-t-md">
                {section.section_order}. {section.title} (
                {section.lessons?.length || 0} lessons)
              </AccordionTrigger>
              <AccordionContent className="p-6 bg-background border-t border-border rounded-b-md">
                {section.lessons && section.lessons.length > 0 ? (
                  <div className="space-y-3">
                    {section.lessons
                      .sort((a, b) => a.lesson_order - b.lesson_order)
                      .map((lesson) => (
                        <CourseLessonItem key={lesson.id} lesson={lesson} />
                      ))}
                  </div>
                ) : (
                  <p className="text-muted-foreground italic">
                    No lessons in this section yet.
                  </p>
                )}
              </AccordionContent>
            </AccordionItem>
          ))}
      </Accordion>
    </div>
  );
};

export default CourseSectionsAccordion;

===== END ./src/components/course-detail/CourseSectionsAccordion.tsx =====

===== BEGIN ./src/components/course-detail/CourseHeroSection.tsx =====
import Image from 'next/image';
import React from 'react';
import { CourseRead } from '@/types/api';

interface CourseHeroSectionProps {
  course: CourseRead;
}

const CourseHeroSection: React.FC<CourseHeroSectionProps> = ({ course }) => {
  const imageUrl = course.image_url || '/placeholder.jpg';

  return (
    <section className="relative w-full h-96 overflow-hidden rounded-lg shadow-lg mb-8 text-black">
      <Image
        src={imageUrl}
        alt={course.title}
        layout="fill"
        objectFit="cover"
        className="absolute inset-0 z-0"
        priority
      />
      <div className="absolute inset-0 bg-gradient-to-t from-background to-transparent z-10 flex items-end p-8">
        <div className="text-foreground max-w-3xl">
          <h1 className="text-4xl md:text-5xl font-extrabold mb-2 leading-tight">
            {course.title}
          </h1>
          <p className="text-lg md:text-xl opacity-90 mb-4 text-muted-foreground">
            {course.description}
          </p>
          <div className="flex flex-wrap gap-4 text-sm md:text-base">
            {course.difficulty_level && (
              <span className="bg-primary text-primary-foreground px-3 py-1 rounded-full font-semibold">
                {course.difficulty_level}
              </span>
            )}
            {course.instructor_id && (
              <span className="bg-muted text-muted-foreground px-3 py-1 rounded-full font-semibold">
                Instructor: {course.instructor_id.substring(0, 8)}...
              </span>
            )}
            {course.is_published && (
              <span className="bg-green-600 text-white px-3 py-1 rounded-full font-semibold">
                Published
              </span>
            )}
          </div>
        </div>
      </div>
    </section>
  );
};

export default CourseHeroSection;
===== END ./src/components/course-detail/CourseHeroSection.tsx =====

===== BEGIN ./src/components/course-detail/CourseLessonItem.tsx =====
import React from "react";
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { BookOpen } from "lucide-react";
import { LessonRead } from "@/types/api";
import Link from "next/link";

interface CourseLessonItemProps {
  lesson: LessonRead;
}

const CourseLessonItem: React.FC<CourseLessonItemProps> = ({ lesson }) => {
  return (
    <Card className="mb-2 shadow-sm hover:shadow-md transition-shadow duration-200 bg-card text-card-foreground border-border">
      <CardContent className="flex items-center justify-between p-4">
        <div className="flex items-center flex-grow min-w-0">
          {" "}
          <BookOpen className="h-5 w-5 text-primary mr-3 flex-shrink-0" />
          <div className="flex-grow min-w-0">
            {" "}
            <h4 className="font-medium text-base text-foreground truncate">
              {lesson.title}
            </h4>{" "}
            {lesson.content && (
              <p className="text-sm text-muted-foreground mt-1 line-clamp-2">
                {lesson.content}
              </p>
            )}
          </div>
        </div>
        <Link href={`/lessons/${lesson.id}`} passHref>
          <Button variant="secondary" className="ml-4 flex-shrink-0">
            View Lesson
          </Button>
        </Link>
      </CardContent>
    </Card>
  );
};

export default CourseLessonItem;

===== END ./src/components/course-detail/CourseLessonItem.tsx =====

===== BEGIN ./src/components/particlesConfig.ts =====
export const particlesConfig = {
  background: {
    color: {
      value: "#0d1117",
    },
  },
  fpsLimit: 60,
  interactivity: {
    events: {
      onHover: {
        enable: true,
        mode: "repulse",
      },
    },
    modes: {
      repulse: {
        distance: 80,
        duration: 0.4,
      },
    },
  },
  particles: {
    color: {
      value: "#ffffff",
    },
    links: {
      color: "#ffffff",
      distance: 150,
      enable: false,
      opacity: 0.5,
      width: 1,
    },
    move: {
      direction: "none",
      enable: true,
      outModes: {
        default: "out",
      },
      random: true,
      speed: 0.2,
      straight: false,
    },
    number: {
      density: {
        enable: true,
      },
      value: 500,
    },
    opacity: {
      value: { min: 0.1, max: 0.7 },
      animation: {
        enable: true,
        speed: 1,
        sync: false,
      },
    },
    shape: {
      type: "circle",
    },
    size: {
      value: { min: 0.5, max: 2.5 },
    },
  },
  detectRetina: true,
};

===== END ./src/components/particlesConfig.ts =====

===== BEGIN ./src/components/providers/QueryProvider.tsx =====
"use client";

import React from "react";
import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
import { ReactQueryDevtools } from "@tanstack/react-query-devtools";

function makeQueryClient() {
  return new QueryClient({
    defaultOptions: {
      queries: {
        staleTime: 15 * 60 * 1000,
      },
    },
  });
}

let browserQueryClient: QueryClient | undefined = undefined;

function getQueryClient() {
  if (typeof window === "undefined") {
    return makeQueryClient();
  } else {
    if (!browserQueryClient) browserQueryClient = makeQueryClient();
    return browserQueryClient;
  }
}

export default function QueryProvider({
  children,
}: {
  children: React.ReactNode;
}) {
  const queryClient = getQueryClient();
  return (
    <QueryClientProvider client={queryClient}>
      {children}
      <ReactQueryDevtools initialIsOpen={false} />
    </QueryClientProvider>
  );
}

===== END ./src/components/providers/QueryProvider.tsx =====

===== BEGIN ./src/components/lesson-detail/LessonContent.tsx =====
"use client";
import React, { useMemo } from "react";
import ReactMarkdown from "react-markdown";
import remarkGfm from "remark-gfm";
import remarkBreaks from "remark-breaks";
import rehypeHighlight from "rehype-highlight";
import "github-markdown-css/github-markdown-dark.css";

export default function LessonContent({ content }: { content: string }) {
  const normalized = useMemo(
    () => (content ?? "").replace(/\r\n/g, "\n").replace(/\\n/g, "\n"),
    [content]
  );

  return (
    <article className="markdown-body mx-auto bg-card p-6 rounded-xl border">
      <ReactMarkdown
        remarkPlugins={[remarkGfm, remarkBreaks]}
        rehypePlugins={[rehypeHighlight]}
      >
        {normalized}
      </ReactMarkdown>
    </article>
  );
}

===== END ./src/components/lesson-detail/LessonContent.tsx =====

===== BEGIN ./src/components/lesson-detail/LessonHeroSection.tsx =====
import Image from "next/image";
import React from "react";
import { LessonRead } from "@/types/api";

interface LessonHeroSectionProps {
  lesson: LessonRead;
  courseTitle?: string;
  sectionTitle?: string;
}

const LessonHeroSection: React.FC<LessonHeroSectionProps> = ({
  lesson,
  courseTitle,
  sectionTitle,
}) => {
  const imageUrl = "/placeholder.jpg";
  return (
    <section className="relative w-full h-72 md:h-80 overflow-hidden rounded-lg shadow-lg mb-8">
      <Image
        src={imageUrl}
        alt={lesson.title}
        layout="fill"
        objectFit="cover"
        className="absolute inset-0 z-0 opacity-50"
        priority
      />
      <div className="absolute inset-0 bg-gradient-to-t from-background/90 to-transparent z-10 flex items-end p-6 md:p-8">
        <div className="text-foreground max-w-3xl">
          {courseTitle && (
            <p className="text-sm md:text-base text-muted-foreground mb-1">
              Course: {courseTitle}
            </p>
          )}
          {sectionTitle && (
            <p className="text-sm md:text-base text-muted-foreground mb-2">
              Section: {sectionTitle}
            </p>
          )}
          <h1 className="text-3xl md:text-4xl font-extrabold mb-2 leading-tight">
            {lesson.title}
          </h1>
          <p className="text-md md:text-lg opacity-90 text-muted-foreground">
            Lesson {lesson.lesson_order}
          </p>
        </div>
      </div>
    </section>
  );
};

export default LessonHeroSection;

===== END ./src/components/lesson-detail/LessonHeroSection.tsx =====

===== BEGIN ./src/components/lesson-detail/LessonPagination.tsx =====
import React from 'react';
import Link from 'next/link';
import { Button } from '@/components/ui/button';
import { ArrowLeft, ArrowRight } from 'lucide-react';

interface LessonPaginationProps {
  previousLessonId: number | null;
  nextLessonId: number | null;
}

const LessonPagination: React.FC<LessonPaginationProps> = ({ previousLessonId, nextLessonId }) => {
  return (
    <div className="flex justify-between mt-8 p-4 bg-card rounded-lg shadow-md border border-border">
      {previousLessonId ? (
        <Link href={`/lessons/${previousLessonId}`} passHref>
          <Button variant="outline" className="flex items-center gap-2">
            <ArrowLeft className="h-4 w-4" /> Previous Lesson
          </Button>
        </Link>
      ) : (
        <Button variant="outline" disabled className="flex items-center gap-2">
          <ArrowLeft className="h-4 w-4" /> Previous Lesson
        </Button>
      )}

      {nextLessonId ? (
        <Link href={`/lessons/${nextLessonId}`} passHref>
          <Button variant="outline" className="flex items-center gap-2">
            Next Lesson <ArrowRight className="h-4 w-4" />
          </Button>
        </Link>
      ) : (
        <Button variant="outline" disabled className="flex items-center gap-2">
          Next Lesson <ArrowRight className="h-4 w-4" />
        </Button>
      )}
    </div>
  );
};

export default LessonPagination;
===== END ./src/components/lesson-detail/LessonPagination.tsx =====

===== BEGIN ./src/components/Header.tsx =====
"use client";

import { useState } from "react";
import Link from "next/link";
import { Menu, Code2 } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Sheet, SheetContent, SheetTrigger } from "@/components/ui/sheet";

const navigation = [
  { name: "Home", href: "/" },
  { name: "Tutorials", href: "/tutorials" },
  { name: "Projects", href: "/projects" },
  { name: "About", href: "/about" },
];

export default function Header() {
  const [isOpen, setIsOpen] = useState(false);

  return (
    <header className="sticky top-0 z-50 w-full border-b border-slate-800/50 bg-slate-950/80 backdrop-blur-md">
      <div className="container mx-auto px-4 sm:px-6 lg:px-8">
        <div className="flex h-16 items-center justify-between">
          {/* Logo */}
          <Link href="/" className="flex items-center space-x-2 group">
            <Code2 className="h-8 w-8 text-blue-500 group-hover:text-blue-400 transition-colors" />
            <span className="text-xl font-bold bg-gradient-to-r from-blue-400 to-purple-400 bg-clip-text text-transparent">
              ASAAN HAI CODING
            </span>
          </Link>

          {/* Desktop Navigation */}
          <nav className="hidden md:flex items-center space-x-8">
            {navigation.map((item) => (
              <Link
                key={item.name}
                href={item.href}
                className="text-slate-300 hover:text-white transition-colors relative group"
              >
                {item.name}
                <span className="absolute -bottom-1 left-0 w-0 h-0.5 bg-blue-500 transition-all group-hover:w-full"></span>
              </Link>
            ))}
          </nav>

          {/* Mobile Navigation */}
          <Sheet open={isOpen} onOpenChange={setIsOpen}>
            <SheetTrigger asChild className="md:hidden">
              <Button variant="ghost" size="icon">
                <Menu className="h-6 w-6" />
                <span className="sr-only">Open menu</span>
              </Button>
            </SheetTrigger>
            <SheetContent
              side="right"
              className="w-[300px] bg-slate-900 border-slate-800"
            >
              <div className="flex flex-col space-y-6 mt-8">
                {navigation.map((item) => (
                  <Link
                    key={item.name}
                    href={item.href}
                    onClick={() => setIsOpen(false)}
                    className="text-lg text-slate-300 hover:text-white transition-colors"
                  >
                    {item.name}
                  </Link>
                ))}
              </div>
            </SheetContent>
          </Sheet>
        </div>
      </div>
    </header>
  );
}

===== END ./src/components/Header.tsx =====

===== BEGIN ./src/utils/slug.ts =====
export const titleToSlug = (title: string, id: string | number): string => {
  const cleanString = (str: string): string => {
    return str
      .toLowerCase()
      .replace(/[^a-z0-9\s-]/g, "")
      .replace(/\s+/g, "-")
      .replace(/-+/g, "-")
      .trimStart()
      .trimEnd();
  };
  const combinedString = `${cleanString(title)}_${id}`;
  return combinedString;
};

export const slugToId = (slug: string): string | null => {
  const parts = slug.split("_");
  if (parts.length > 0) {
    const lastPart = parts[parts.length - 1];
    return lastPart;
  }
  return null;
};

===== END ./src/utils/slug.ts =====

===== BEGIN ./src/services/auth.ts =====
import api from "./api";
import {
  BodyLoginApiV1AuthLoginPost,
  BodyResetPasswordApiV1AuthResetPasswordPatch,
  UserRead,
} from "../types/api";

export const authService = {
  login: async (data: BodyLoginApiV1AuthLoginPost) => {
    const formData = new URLSearchParams();
    formData.append("username", data.username);
    formData.append("password", data.password);
    if (data.grant_type) formData.append("grant_type", data.grant_type);
    if (data.scope) formData.append("scope", data.scope);
    if (data.client_id) formData.append("client_id", data.client_id);
    if (data.client_secret)
      formData.append("client_secret", data.client_secret);

    const response = await api.post("/api/v1/auth/login", formData.toString(), {
      headers: {
        "Content-Type": "application/x-www-form-urlencoded",
      },
    });
    return response.data;
  },

  resetPassword: async (data: BodyResetPasswordApiV1AuthResetPasswordPatch) => {
    const formData = new URLSearchParams();
    formData.append("username", data.username);
    formData.append("password", data.password);
    if (data.grant_type) formData.append("grant_type", data.grant_type);
    if (data.scope) formData.append("scope", data.scope);
    if (data.client_id) formData.append("client_id", data.client_id);
    if (data.client_secret)
      formData.append("client_secret", data.client_secret);

    const response = await api.patch(
      "/api/v1/auth/reset-password",
      formData.toString(),
      {
        headers: {
          "Content-Type": "application/x-www-form-urlencoded",
        },
      }
    );
    return response.data;
  },

  whoAmI: async () => {
    const response = await api.get<UserRead>("/api/v1/auth/me");
    return response.data;
  },
};

===== END ./src/services/auth.ts =====

===== BEGIN ./src/services/api.ts =====
import axios from "axios";

const API_BASE_URL =
  process.env.NEXT_PUBLIC_API_BASE_URL || "http://localhost:8000";

const api = axios.create({
  baseURL: API_BASE_URL,
  headers: {
    "Content-Type": "application/json",
  },
});

export const setAuthToken = (token: string | null) => {
  if (token) {
    api.defaults.headers.common["Authorization"] = `Bearer ${token}`;
  } else {
    delete api.defaults.headers.common["Authorization"];
  }
};

export default api;

===== END ./src/services/api.ts =====

===== BEGIN ./src/services/lessons.ts =====
import api from './api';
import {
  LessonCreate,
  LessonRead,
  LessonUpdate,
} from '../types/api';

export const lessonsService = {
  listLessons: async (section_id: number) => {
    const response = await api.get<LessonRead[]>('/api/v1/lessons', {
      params: { section_id },
    });
    return response.data;
  },

  createLesson: async (data: LessonCreate) => {
    const response = await api.post<LessonRead>('/api/v1/lessons', data);
    return response.data;
  },

  getLesson: async (lesson_id: number) => {
    const response = await api.get<LessonRead>(`/api/v1/lessons/${lesson_id}`);
    return response.data;
  },

  updateLesson: async (lesson_id: number, data: LessonUpdate) => {
    const response = await api.put<LessonRead>(`/api/v1/lessons/${lesson_id}`, data);
    return response.data;
  },

  deleteLesson: async (lesson_id: number) => {
    const response = await api.delete(`/api/v1/lessons/${lesson_id}`);
    return response.data;
  },

  createLessonsBulk: async (data: LessonCreate[]) => {
    const response = await api.post<LessonRead[]>('/api/v1/lessons/bulk', data);
    return response.data;
  },
};
===== END ./src/services/lessons.ts =====

===== BEGIN ./src/services/projects.ts =====
import api from './api';
import {
  ProjectCreate,
  ProjectRead,
  ProjectUpdate,
  ProjectDetailCreate,
  ProjectDetailRead,
  ProjectDetailUpdate,
} from '../types/api';

export const projectsService = {
  listProjects: async (skip: number = 0, limit: number = 20) => {
    const response = await api.get<ProjectRead[]>('/api/v1/projects', {
      params: { skip, limit },
    });
    return response.data;
  },

  createProject: async (data: ProjectCreate) => {
    const response = await api.post<ProjectRead>('/api/v1/projects', data);
    return response.data;
  },

  getProject: async (project_id: number) => {
    const response = await api.get<ProjectRead>(`/api/v1/projects/${project_id}`);
    return response.data;
  },

  updateProject: async (project_id: number, data: ProjectUpdate) => {
    const response = await api.put<ProjectRead>(`/api/v1/projects/${project_id}`, data);
    return response.data;
  },

  deleteProject: async (project_id: number) => {
    const response = await api.delete(`/api/v1/projects/${project_id}`);
    return response.data;
  },

  createProjectsBulk: async (data: ProjectCreate[]) => {
    const response = await api.post<ProjectRead[]>('/api/v1/projects/bulk', data);
    return response.data;
  },

  getProjectDetail: async (project_id: number) => {
    const response = await api.get<ProjectDetailRead>(`/api/v1/projects/${project_id}/detail`);
    return response.data;
  },

  createProjectDetail: async (project_id: number, data: ProjectDetailCreate) => {
    const response = await api.post<ProjectDetailRead>(`/api/v1/projects/${project_id}/detail`, data);
    return response.data;
  },

  updateProjectDetail: async (project_id: number, data: ProjectDetailUpdate) => {
    const response = await api.put<ProjectDetailRead>(`/api/v1/projects/${project_id}/detail`, data);
    return response.data;
  },
};
===== END ./src/services/projects.ts =====

===== BEGIN ./src/services/sections.ts =====
import api from "./api";
import {
  SectionRead,
  SectionCreate,
  SectionReadBase,
  SectionUpdate,
} from "../types/api";

export const sectionsService = {
  listSections: async (course_id: string) => {
    const response = await api.get<SectionReadBase[]>("/api/v1/sections", {
      params: { course_id },
    });
    return response.data;
  },

  createSection: async (data: SectionCreate) => {
    const response = await api.post<SectionRead>("/api/v1/sections", data);
    return response.data;
  },

  getSection: async (section_id: number) => {
    const response = await api.get<SectionRead>(
      `/api/v1/sections/${section_id}`
    );
    return response.data;
  },

  updateSection: async (section_id: number, data: SectionUpdate) => {
    const response = await api.put<SectionRead>(
      `/api/v1/sections/${section_id}`,
      data
    );
    return response.data;
  },

  deleteSection: async (section_id: number) => {
    const response = await api.delete(`/api/v1/sections/${section_id}`);
    return response.data;
  },

  createSectionsBulk: async (data: SectionCreate[]) => {
    const response = await api.post<SectionRead[]>(
      "/api/v1/sections/bulk",
      data
    );
    return response.data;
  },
};

===== END ./src/services/sections.ts =====

===== BEGIN ./src/services/courses.ts =====
import api from './api';
import {
  CourseCreate,
  CourseRead,
  CourseReadBase,
  CourseUpdate,
} from '../types/api';

export const coursesService = {
  listCourses: async (skip: number = 0, limit: number = 20) => {
    const response = await api.get<CourseReadBase[]>('/api/v1/courses', {
      params: { skip, limit },
    });
    return response.data;
  },

  createCourse: async (data: CourseCreate) => {
    const response = await api.post<CourseRead>('/api/v1/courses', data);
    return response.data;
  },

  getCourse: async (course_id: string) => {
    const response = await api.get<CourseRead>(`/api/v1/courses/${course_id}`);
    return response.data;
  },

  updateCourse: async (course_id: string, data: CourseUpdate) => {
    const response = await api.put<CourseRead>(`/api/v1/courses/${course_id}`, data);
    return response.data;
  },

  deleteCourse: async (course_id: string) => {
    const response = await api.delete(`/api/v1/courses/${course_id}`);
    return response.data;
  },

  createCoursesBulk: async (data: CourseCreate[]) => {
    const response = await api.post<CourseReadBase[]>('/api/v1/courses/bulk', data);
    return response.data;
  },
};
===== END ./src/services/courses.ts =====

===== BEGIN ./src/services/users.ts =====
import api from './api';
import {
  UserCreate,
  UserUpdate,
  UserRead,
} from '../types/api';

export const usersService = {
  updateUser: async (user_id: number, data: UserUpdate) => {
    const response = await api.put<UserRead>(`/api/v1/users/${user_id}`, data);
    return response.data;
  },

  getUser: async (user_id: number) => {
    const response = await api.get<UserRead>(`/api/v1/users/${user_id}`);
    return response.data;
  },

  deleteUser: async (user_id: number) => {
    const response = await api.delete(`/api/v1/users/${user_id}`);
    return response.data;
  },

  listUsers: async (skip: number = 0, limit: number = 50) => {
    const response = await api.get<UserRead[]>('/api/v1/users', {
      params: { skip, limit },
    });
    return response.data;
  },

  createUserBulk: async (data: UserCreate[]) => {
    const response = await api.post<UserRead[]>('/api/v1/users', data);
    return response.data;
  },
};
===== END ./src/services/users.ts =====

===== BEGIN ./src/lib/utils.ts =====
import { clsx, type ClassValue } from "clsx";
import { twMerge } from "tailwind-merge";

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}

===== END ./src/lib/utils.ts =====

===== BEGIN ./src/types/api.ts =====
export interface BodyLoginApiV1AuthLoginPost {
  grant_type?: string | null;
  username: string;
  password: string;
  scope?: string;
  client_id?: string | null;
  client_secret?: string | null;
}

export interface BodyResetPasswordApiV1AuthResetPasswordPatch {
  grant_type?: string | null;
  username: string;
  password: string;
  scope?: string;
  client_id?: string | null;
  client_secret?: string | null;
}

// USER TYPES =====================

export interface UserCreate {
  username: string;
  password: string;
  email: string;
  full_name: string;
  contact?: string | null;
  role?: "ADMIN" | "USER" | "MODERATOR";
  gender?: "MALE" | "FEMALE" | "OTHER" | null;
}

export interface UserUpdate {
  full_name?: string | null;
  gender?: "MALE" | "FEMALE" | "OTHER" | null;
  contact?: string | null;
}

export interface UserRead {
  id: string;
  username: string;
  email: string;
  full_name: string;
  contact: string | null;
  gender: UserGender | null;
  role: UserRole;
  created_at?: string | null;
  updated_at?: string | null;
}

export enum UserGender {
  "MALE",
  "FEMALE",
  "OTHER",
}

export enum UserRole {
  "ADMIN",
  "USER",
  "MODERATOR",
}

// LESSON TYPES ===============================

export interface LessonRead {
  id: number;
  section_id: number;
  course_id: string;
  title: string;
  content: string;
  lesson_order: number;
}

// SECTION TYPES ==========================

export interface SectionRead {
  id: number;
  course_id: string;
  title: string;
  section_order: number;
  lessons: LessonRead[];
}

export interface SectionCreate {
  course_id: string;
  title: string;
  section_order: number;
}

export interface SectionReadBase {
  id: number;
  course_id: string;
  title: string;
  section_order: number;
}

export interface SectionUpdate {
  title?: string | null;
  section_order?: number | null;
}

// COURSE TYPES ==========================

export interface CourseRead {
  created_at: string;
  updated_at: string;
  id: string;
  title: string;
  description: string;
  instructor_id: string;
  difficulty_level: string;
  is_published: boolean;
  image_url?: string;
  category?: string;
  sections: SectionRead[];
}

export interface CourseReadBase extends CourseRead {}

export interface CourseCreate {
  title: string;
  description?: string | null;
  instructor_id?: string | null;
  difficulty_level?: string | null;
  is_published?: boolean;
}

export interface CourseUpdate {
  title?: string | null;
  description?: string | null;
  instructor_id?: string | null;
  difficulty_level?: string | null;
  is_published?: boolean | null;
}

export interface LessonCreate {
  section_id: number;
  title: string;
  content?: string | null;
  lesson_order: number;
}

export interface LessonUpdate {
  title?: string | null;
  content?: string | null;
  lesson_order?: number | null;
}

export interface ProjectCreate {
  title: string;
  description?: string | null;
  client_name?: string | null;
  project_type?: string | null;
  thumbnail_url?: string | null;
  live_demo_url?: string | null;
  github_url?: string | null;
  is_published?: boolean;
}

export interface ProjectRead {
  id: number;
  title: string;
  description?: string | null;
  client_name?: string | null;
  project_type?: string | null;
  thumbnail_url?: string | null;
  live_demo_url?: string | null;
  github_url?: string | null;
  is_published: boolean;
  created_at?: string | null;
  updated_at?: string | null;
  detail?: ProjectDetailRead | null;
}

export interface ProjectUpdate {
  title?: string | null;
  description?: string | null;
  client_name?: string | null;
  project_type?: string | null;
  thumbnail_url?: string | null;
  live_demo_url?: string | null;
  github_url?: string | null;
  is_published?: boolean | null;
}

export interface ProjectDetailCreate {
  markdown_content: string;
}

export interface ProjectDetailRead {
  markdown_content: string;
}

export interface ProjectDetailUpdate {
  markdown_content?: string | null;
}

===== END ./src/types/api.ts =====

===== BEGIN ./src/hooks/use-mobile.tsx =====
import * as React from "react";

const MOBILE_BREAKPOINT = 768;

export function useIsMobile() {
  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(
    undefined
  );

  React.useEffect(() => {
    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`);
    const onChange = () => {
      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT);
    };
    mql.addEventListener("change", onChange);
    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT);
    return () => mql.removeEventListener("change", onChange);
  }, []);

  return !!isMobile;
}

===== END ./src/hooks/use-mobile.tsx =====

===== BEGIN ./src/hooks/use-toast.ts =====
"use client";

import * as React from "react";

import type { ToastActionElement, ToastProps } from "@/components/ui/toast";

const TOAST_LIMIT = 1;
const TOAST_REMOVE_DELAY = 1000000;

type ToasterToast = ToastProps & {
  id: string;
  title?: React.ReactNode;
  description?: React.ReactNode;
  action?: ToastActionElement;
};

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const;

let count = 0;

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER;
  return count.toString();
}

type ActionType = typeof actionTypes;

type Action =
  | {
      type: ActionType["ADD_TOAST"];
      toast: ToasterToast;
    }
  | {
      type: ActionType["UPDATE_TOAST"];
      toast: Partial<ToasterToast>;
    }
  | {
      type: ActionType["DISMISS_TOAST"];
      toastId?: ToasterToast["id"];
    }
  | {
      type: ActionType["REMOVE_TOAST"];
      toastId?: ToasterToast["id"];
    };

interface State {
  toasts: ToasterToast[];
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>();

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return;
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId);
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    });
  }, TOAST_REMOVE_DELAY);

  toastTimeouts.set(toastId, timeout);
};

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      };

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      };

    case "DISMISS_TOAST": {
      const { toastId } = action;

      if (toastId) {
        addToRemoveQueue(toastId);
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id);
        });
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      };
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        };
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      };
  }
};

const listeners: Array<(state: State) => void> = [];

let memoryState: State = { toasts: [] };

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action);
  listeners.forEach((listener) => {
    listener(memoryState);
  });
}

type Toast = Omit<ToasterToast, "id">;

function toast({ ...props }: Toast) {
  const id = genId();

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    });
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id });

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss();
      },
    },
  });

  return {
    id: id,
    dismiss,
    update,
  };
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState);

  React.useEffect(() => {
    listeners.push(setState);
    return () => {
      const index = listeners.indexOf(setState);
      if (index > -1) {
        listeners.splice(index, 1);
      }
    };
  }, [state]);

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  };
}

export { useToast, toast };

===== END ./src/hooks/use-toast.ts =====

===== BEGIN ./src/app/lessons/[slug]/page.tsx =====
"use client";
import React from "react";
import { lessonsService } from "@/services/lessons";
import LessonHeroSection from "@/components/lesson-detail/LessonHeroSection";
import LessonContent from "@/components/lesson-detail/LessonContent";
import LessonPagination from "@/components/lesson-detail/LessonPagination";
import { notFound, useParams } from "next/navigation";
import { useQuery } from "@tanstack/react-query";

interface LessonDetailPageProps {
  params: {
    slug: string;
  };
}

const LessonDetailPage: React.FC<LessonDetailPageProps> = () => {
  const params = useParams<{ slug: string }>();

  const lessonId = parseInt(params.slug, 10);

  if (isNaN(lessonId)) {
    notFound();
  }

  const {
    data: lesson,
    isLoading,
    error,
  } = useQuery({
    queryKey: ["lesson", lessonId],
    queryFn: () => lessonsService.getLesson(lessonId),
    enabled: !isNaN(lessonId),
  });

  const courseTitle: string | undefined = undefined;
  const sectionTitle: string | undefined = undefined;
  const previousLessonId: number | null = null;
  const nextLessonId: number | null = null;

  if (isLoading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center space-y-4">
          <div className="animate-spin rounded-full h-16 w-16 border-t-2 border-b-2 border-blue-500 mx-auto"></div>
          <p className="text-slate-400">Loading lesson details...</p>
        </div>
      </div>
    );
  }

  if (error) {
    console.error(`Failed to fetch lesson with ID ${lessonId}:`, error);
    notFound();
  }

  if (!lesson) {
    notFound();
  }

  return (
    <div className="container mx-auto px-4 py-8 max-w-5xl">
      <LessonHeroSection
        lesson={lesson}
        courseTitle={courseTitle}
        sectionTitle={sectionTitle}
      />
      <LessonContent content={lesson.content} />
      <LessonPagination
        previousLessonId={previousLessonId}
        nextLessonId={nextLessonId}
      />
    </div>
  );
};

export default LessonDetailPage;

===== END ./src/app/lessons/[slug]/page.tsx =====

===== BEGIN ./src/app/about/page.tsx =====
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Progress } from "@/components/ui/progress";
import {
  Github,
  Linkedin,
  Mail,
  MapPin,
  Calendar,
  Award,
  Code2,
  Briefcase,
} from "lucide-react";
import Image from "next/image";

const skills = [
  { name: "JavaScript/TypeScript", level: 95, category: "Frontend" },
  { name: "React/Next.js", level: 90, category: "Frontend" },
  { name: "Node.js", level: 85, category: "Backend" },
  { name: "Python", level: 80, category: "Backend" },
  { name: "Tailwind CSS", level: 90, category: "Frontend" },
  { name: "PostgreSQL", level: 75, category: "Database" },
  { name: "MongoDB", level: 70, category: "Database" },
  { name: "Docker", level: 65, category: "DevOps" },
];

const experience = [
  {
    title: "Senior Full Stack Developer",
    company: "Tech Innovations Inc.",
    period: "2022 - Present",
    description:
      "Leading development of scalable web applications using Next.js, TypeScript, and cloud technologies. Mentoring junior developers and architecting solutions for enterprise clients.",
  },
  {
    title: "Frontend Developer",
    company: "Digital Solutions Ltd.",
    period: "2020 - 2022",
    description:
      "Developed responsive web applications using React and modern JavaScript. Collaborated with design teams to implement pixel-perfect UI components and optimize user experiences.",
  },
  {
    title: "Junior Developer",
    company: "StartupXYZ",
    period: "2019 - 2020",
    description:
      "Built and maintained web applications using various technologies. Gained experience in full-stack development and agile methodologies.",
  },
];

const achievements = [
  "Published 50+ programming tutorials with 100K+ views",
  "Built and deployed 25+ production applications",
  "Contributed to 10+ open source projects",
  "Mentored 200+ aspiring developers",
  "Speaker at 5 tech conferences",
];

export default function AboutPage() {
  return (
    <div className="min-h-screen py-20 px-4 sm:px-6 lg:px-8">
      <div className="max-w-6xl mx-auto">
        {/* Header */}
        <div className="text-center mb-16">
          <h1 className="text-4xl sm:text-5xl font-bold mb-4">
            <span className="bg-gradient-to-r from-green-400 to-blue-400 bg-clip-text text-transparent">
              About Me
            </span>
          </h1>
          <p className="text-xl text-slate-400 max-w-3xl mx-auto">
            Passionate developer, educator, and content creator dedicated to
            making programming accessible for everyone
          </p>
        </div>

        {/* Hero Section */}
        <Card className="bg-slate-900/50 border-slate-800 mb-12">
          <CardContent className="p-8">
            <div className="grid grid-cols-1 lg:grid-cols-3 gap-8 items-center">
              <div className="lg:col-span-1 text-center">
                <div className="relative w-48 h-48 mx-auto mb-6">
                  <Image
                    src="/placeholder.svg?height=200&width=200&text=Profile+Photo"
                    alt="Profile Photo"
                    width={200}
                    height={200}
                    className="rounded-full object-cover border-4 border-blue-500"
                  />
                  <div className="absolute inset-0 rounded-full bg-gradient-to-tr from-blue-500/20 to-purple-500/20"></div>
                </div>
                <div className="flex justify-center space-x-4">
                  <Button
                    size="sm"
                    variant="outline"
                    className="border-slate-600 hover:bg-slate-800"
                  >
                    <Github className="h-4 w-4 mr-2" />
                    GitHub
                  </Button>
                  <Button
                    size="sm"
                    variant="outline"
                    className="border-slate-600 hover:bg-slate-800"
                  >
                    <Linkedin className="h-4 w-4 mr-2" />
                    LinkedIn
                  </Button>
                  <Button
                    size="sm"
                    variant="outline"
                    className="border-slate-600 hover:bg-slate-800"
                  >
                    <Mail className="h-4 w-4 mr-2" />
                    Email
                  </Button>
                </div>
              </div>

              <div className="lg:col-span-2">
                <h2 className="text-3xl font-bold mb-4 text-white">
                  Hi, I&apos;m the ASAAN HAI CODING Team!
                </h2>
                <p className="text-slate-300 leading-relaxed mb-6">
                  We are a passionate team of developers and educators committed
                  to making programming simple and accessible. With years of
                  experience in web development, mobile apps, and software
                  engineering, we create comprehensive tutorials and build
                  real-world projects to help aspiring developers master their
                  craft.
                </p>
                <p className="text-slate-300 leading-relaxed mb-6">
                  Our mission is to bridge the gap between complex programming
                  concepts and practical implementation. We believe that anyone
                  can learn to code with the right guidance, clear explanations,
                  and hands-on practice.
                </p>
                <div className="flex items-center space-x-6 text-sm text-slate-400">
                  <div className="flex items-center space-x-1">
                    <MapPin className="h-4 w-4" />
                    <span>Remote, Worldwide</span>
                  </div>
                  <div className="flex items-center space-x-1">
                    <Calendar className="h-4 w-4" />
                    <span>Available for Projects</span>
                  </div>
                </div>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Skills Section */}
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8 mb-12">
          <Card className="bg-slate-900/50 border-slate-800">
            <CardHeader>
              <CardTitle className="flex items-center space-x-2">
                <Code2 className="h-6 w-6 text-blue-400" />
                <span>Technical Skills</span>
              </CardTitle>
              <CardDescription>
                Technologies and tools I work with regularly
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
              {skills.map((skill) => (
                <div key={skill.name} className="space-y-2">
                  <div className="flex justify-between items-center">
                    <span className="text-slate-300 font-medium">
                      {skill.name}
                    </span>
                    <div className="flex items-center space-x-2">
                      <Badge
                        variant="secondary"
                        className="bg-slate-800 text-slate-400 text-xs"
                      >
                        {skill.category}
                      </Badge>
                      <span className="text-slate-400 text-sm">
                        {skill.level}%
                      </span>
                    </div>
                  </div>
                  <Progress value={skill.level} className="h-2" />
                </div>
              ))}
            </CardContent>
          </Card>

          <Card className="bg-slate-900/50 border-slate-800">
            <CardHeader>
              <CardTitle className="flex items-center space-x-2">
                <Award className="h-6 w-6 text-green-400" />
                <span>Achievements</span>
              </CardTitle>
              <CardDescription>
                Milestones and accomplishments in my journey
              </CardDescription>
            </CardHeader>
            <CardContent>
              <ul className="space-y-4">
                {achievements.map((achievement, index) => (
                  <li key={index} className="flex items-start space-x-3">
                    <div className="w-2 h-2 bg-green-400 rounded-full mt-2 flex-shrink-0"></div>
                    <span className="text-slate-300">{achievement}</span>
                  </li>
                ))}
              </ul>
            </CardContent>
          </Card>
        </div>

        {/* Experience Section */}
        <Card className="bg-slate-900/50 border-slate-800">
          <CardHeader>
            <CardTitle className="flex items-center space-x-2">
              <Briefcase className="h-6 w-6 text-purple-400" />
              <span>Professional Experience</span>
            </CardTitle>
            <CardDescription>
              My journey in the world of software development
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="space-y-8">
              {experience.map((job, index) => (
                <div key={index} className="relative">
                  {index !== experience.length - 1 && (
                    <div className="absolute left-6 top-12 w-0.5 h-16 bg-slate-700"></div>
                  )}
                  <div className="flex items-start space-x-4">
                    <div className="w-12 h-12 bg-purple-600 rounded-full flex items-center justify-center flex-shrink-0">
                      <Briefcase className="h-6 w-6 text-white" />
                    </div>
                    <div className="flex-1">
                      <h3 className="text-xl font-bold text-white">
                        {job.title}
                      </h3>
                      <p className="text-purple-400 font-medium">
                        {job.company}
                      </p>
                      <p className="text-slate-400 text-sm mb-2">
                        {job.period}
                      </p>
                      <p className="text-slate-300 leading-relaxed">
                        {job.description}
                      </p>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}

===== END ./src/app/about/page.tsx =====

===== BEGIN ./src/app/tutorials/[slug]/page.tsx =====
"use client";

import React from "react";
import { coursesService } from "@/services/courses";
import CourseHeroSection from "@/components/course-detail/CourseHeroSection";
import CourseSectionsAccordion from "@/components/course-detail/CourseSectionsAccordion";
import { notFound } from "next/navigation";
import { slugToId } from "@/utils/slug";
import { useQuery } from "@tanstack/react-query";
import { useParams } from "next/navigation";

interface CourseDetailPageProps {
  params: {
    slug: string;
  };
}

const CourseDetailPage: React.FC<CourseDetailPageProps> = () => {
  const params = useParams<{ slug: string }>();

  // console.log("PARAMS ", params);

  const courseId = slugToId(params.slug);

  const {
    data: course,
    isLoading,
    error,
  } = useQuery({
    queryKey: ["course", courseId],
    queryFn: () => {
      if (!courseId) {
        throw new Error("Course ID extraction error!");
      }
      return coursesService.getCourse(courseId);
    },
    enabled: !!courseId,
  });

  if (isLoading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center space-y-4">
          <div className="animate-spin rounded-full h-16 w-16 border-t-2 border-b-2 border-blue-500 mx-auto"></div>
          <p className="text-slate-400">Loading course details...</p>
        </div>
      </div>
    );
  }

  if (error) {
    console.error(`Failed to fetch course with ID ${courseId}:`, error);
    notFound();
  }

  if (!course) {
    notFound();
  }

  return (
    <div className="container mx-auto px-4 py-8 max-w-6xl">
      <CourseHeroSection course={course} />
      <CourseSectionsAccordion course={course} />
    </div>
  );
};

export default CourseDetailPage;

===== END ./src/app/tutorials/[slug]/page.tsx =====

===== BEGIN ./src/app/tutorials/page.tsx =====
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Clock, BookOpen, Calendar } from "lucide-react";
import Link from "next/link";
import Image from "next/image";

const tutorials = [
  {
    id: 1,
    title: "Complete Next.js 15 Guide",
    description:
      "Learn Next.js 15 from scratch with App Router, Server Components, and modern React patterns. Build production-ready applications.",
    image: "/placeholder.svg?height=200&width=300&text=Next.js+15+Guide",
    category: "Web Development",
    readTime: "45 min",
    publishedAt: "2024-01-15",
    slug: "complete-nextjs-15-guide",
  },
  {
    id: 2,
    title: "Python for Beginners",
    description:
      "Start your programming journey with Python. Learn syntax, data structures, and build real projects step by step.",
    image: "/placeholder.svg?height=200&width=300&text=Python+for+Beginners",
    category: "Programming",
    readTime: "60 min",
    publishedAt: "2024-01-10",
    slug: "python-for-beginners",
  },
  {
    id: 3,
    title: "React Native Mobile Apps",
    description:
      "Build cross-platform mobile applications using React Native and modern development tools and best practices.",
    image: "/placeholder.svg?height=200&width=300&text=React+Native+Apps",
    category: "Mobile Development",
    readTime: "90 min",
    publishedAt: "2024-01-05",
    slug: "react-native-mobile-apps",
  },
  {
    id: 4,
    title: "TypeScript Fundamentals",
    description:
      "Master TypeScript from basics to advanced concepts. Learn type safety, interfaces, generics, and more.",
    image: "/placeholder.svg?height=200&width=300&text=TypeScript+Fundamentals",
    category: "Programming",
    readTime: "75 min",
    publishedAt: "2024-01-01",
    slug: "typescript-fundamentals",
  },
  {
    id: 5,
    title: "Tailwind CSS Mastery",
    description:
      "Learn utility-first CSS with Tailwind. Create beautiful, responsive designs with modern CSS techniques.",
    image: "/placeholder.svg?height=200&width=300&text=Tailwind+CSS+Mastery",
    category: "Frontend",
    readTime: "50 min",
    publishedAt: "2023-12-28",
    slug: "tailwind-css-mastery",
  },
  {
    id: 6,
    title: "Node.js Backend Development",
    description:
      "Build scalable backend applications with Node.js, Express, and modern JavaScript patterns.",
    image: "/placeholder.svg?height=200&width=300&text=Node.js+Backend",
    category: "Backend",
    readTime: "120 min",
    publishedAt: "2023-12-25",
    slug: "nodejs-backend-development",
  },
];

export default function TutorialsPage() {
  return (
    <div className="min-h-screen py-20 px-4 sm:px-6 lg:px-8">
      <div className="max-w-7xl mx-auto">
        {/* Header */}
        <div className="text-center mb-16">
          <h1 className="text-4xl sm:text-5xl font-bold mb-4">
            <span className="bg-gradient-to-r from-purple-400 to-pink-400 bg-clip-text text-transparent">
              Programming Tutorials
            </span>
          </h1>
          <p className="text-xl text-slate-400 max-w-3xl mx-auto">
            Comprehensive step-by-step guides to help you master programming
            concepts, frameworks, and build amazing projects from scratch.
          </p>
        </div>

        {/* Tutorials Grid */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
          {tutorials.map((tutorial) => (
            <Card
              key={tutorial.id}
              className="bg-slate-900/50 border-slate-800 hover:border-slate-700 transition-all duration-300 group"
            >
              <div className="relative overflow-hidden rounded-t-lg">
                <Image
                  src={tutorial.image || "/placeholder.svg"}
                  alt={tutorial.title}
                  width={300}
                  height={200}
                  className="w-full h-48 object-cover group-hover:scale-105 transition-transform duration-300"
                />
                <div className="absolute top-4 left-4">
                  <Badge className="bg-purple-600 hover:bg-purple-700">
                    {tutorial.category}
                  </Badge>
                </div>
              </div>

              <CardHeader>
                <CardTitle className="text-white group-hover:text-purple-400 transition-colors">
                  {tutorial.title}
                </CardTitle>
                <CardDescription className="text-slate-400">
                  {tutorial.description}
                </CardDescription>
              </CardHeader>

              <CardContent className="space-y-4">
                <div className="flex items-center justify-between text-sm text-slate-500">
                  <div className="flex items-center space-x-1">
                    <Clock className="h-4 w-4" />
                    <span>{tutorial.readTime}</span>
                  </div>
                  <div className="flex items-center space-x-1">
                    <Calendar className="h-4 w-4" />
                    <span>
                      {new Date(tutorial.publishedAt).toLocaleDateString()}
                    </span>
                  </div>
                </div>

                <Button
                  asChild
                  className="w-full bg-purple-600 hover:bg-purple-700"
                >
                  <Link
                    href={`/tutorials/${tutorial.slug}`}
                    className="flex items-center justify-center space-x-2"
                  >
                    <BookOpen className="h-4 w-4" />
                    <span>Read Tutorial</span>
                  </Link>
                </Button>
              </CardContent>
            </Card>
          ))}
        </div>
      </div>
    </div>
  );
}

===== END ./src/app/tutorials/page.tsx =====

===== BEGIN ./src/app/globals.css =====
@import "tailwindcss";

@layer base {
  :root {
    --background: 222.2 84% 4.9%;
    --foreground: 210 40% 98%;

    --card: 222.2 84% 4.9%;
    --card-foreground: 210 40% 98%;

    --popover: 222.2 84% 4.9%;
    --popover-foreground: 210 40% 98%;

    --primary: 217.2 91.2% 59.8%;
    --primary-foreground: 222.2 84% 4.9%;

    --secondary: 217.2 32.6% 17.5%;
    --secondary-foreground: 210 40% 98%;

    --muted: 217.2 32.6% 17.5%;
    --muted-foreground: 215 20.2% 65.1%;

    --accent: 217.2 32.6% 17.5%;
    --accent-foreground: 210 40% 98%;

    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 210 40% 98%;

    --border: 217.2 32.6% 17.5%;
    --input: 217.2 32.6% 17.5%;
    --ring: 224.3 76.3% 94.1%;

    --radius: 0.75rem;

    --cursor-color: white;
  }

  html {
    @apply antialiased;
  }
  body {
    background-color: hsl(var(--background));
    color: hsl(var(--foreground));
    @apply leading-relaxed;
  }

  *,
  ::before,
  ::after {
    border-color: hsl(var(--border));
  }
}
/* Wrap spacing */
.markdown-body [data-rehype-pretty-code-figure] {
  margin: 1.25rem 0;
}

/* Code container */
.markdown-body [data-rehype-pretty-code-figure] pre {
  width: 100%;
  overflow: auto;
  border-radius: 0.75rem;
  padding: 1rem;
}

/* Each line (rehype-pretty-code emits span.line with [data-line]) */
.markdown-body [data-rehype-pretty-code-figure] code span.line {
  display: block;
  padding-left: 0.75rem;
  border-left: 2px solid transparent; /* becomes colored when highlighted */
}

/* Highlighted line (set via {1,3-5} meta) */
.markdown-body [data-rehype-pretty-code-figure] [data-highlighted-line] {
  background: rgba(148, 163, 184, 0.12); /* subtle */
  border-left-color: #3b82f6; /* primary-ish */
}

/* Highlighted characters (set via //word// meta) */
.markdown-body [data-rehype-pretty-code-figure] [data-highlighted-chars] {
  background: rgba(251, 191, 36, 0.25);
  border-radius: 0.25rem;
  box-shadow: 0 0 0 2px rgba(251, 191, 36, 0.25);
}

/* Optional: a class set in onVisitHighlightedWord */
.markdown-body [data-rehype-pretty-code-figure] .word {
  background: rgba(251, 191, 36, 0.25);
  border-radius: 0.25rem;
}

::selection {
  background-color: var(--background);
  color: white;
}

===== END ./src/app/globals.css =====

===== BEGIN ./src/app/loading.tsx =====
export default function Loading() {
  return (
    <div className="min-h-screen flex items-center justify-center">
      <div className="text-center space-y-4">
        <div className="animate-spin rounded-full h-16 w-16 border-t-2 border-b-2 border-blue-500 mx-auto"></div>
        <p className="text-slate-400">Loading...</p>
      </div>
    </div>
  );
}

===== END ./src/app/loading.tsx =====

===== BEGIN ./src/app/layout.tsx =====
import type { Metadata } from "next";
import { Inter } from "next/font/google";
import "./globals.css";
import Header from "@/components/Header";
import QueryProvider from "@/components/providers/QueryProvider";
import UniverseBackground from "@/components/UniverseBackground";
import AnimatedCursor from "@/components/AnimatedCursor";

const inter = Inter({ subsets: ["latin"] });

export const metadata: Metadata = {
  title: "ASAAN HAI CODING - Learn Programming the Easy Way",
  description:
    "Master programming with easy-to-follow tutorials, projects, and resources. From beginner to advanced, we make coding simple.",
  keywords:
    "programming, coding, tutorials, web development, mobile apps, python, nextjs",
};

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="en" className="dark">
      <body className={`${inter.className} text-slate-100 antialiased`}>
        <UniverseBackground />
        <AnimatedCursor
          innerSize={8}
          outerSize={35}
          innerScale={1}
          outerScale={2}
          outerAlpha={0}
          // hasBlendMode={true}
          innerStyle={{
            backgroundColor: "var(--cursor-color)",
          }}
          outerStyle={{
            border: "3px solid var(--cursor-color)",
          }}
        />
        <QueryProvider>
          <Header />
          <main className="min-h-screen z-10">{children}</main>
        </QueryProvider>
      </body>
    </html>
  );
}

===== END ./src/app/layout.tsx =====

===== BEGIN ./src/app/projects/[slug]/page.tsx =====
import { notFound } from "next/navigation";
import Image from "next/image";
import Link from "next/link";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Card, CardContent } from "@/components/ui/card";
import { ExternalLink, Github, ArrowLeft, Calendar, User } from "lucide-react";

const projects = {
  "ecommerce-platform": {
    title: "E-Commerce Platform",
    description:
      "A comprehensive e-commerce solution built with Next.js 15, featuring modern design, secure payments, and advanced admin capabilities.",
    longDescription: `This full-stack e-commerce platform represents the pinnacle of modern web development, combining cutting-edge technologies with user-centric design principles. Built with Next.js 15 and the App Router, it delivers exceptional performance and SEO optimization.

The platform features a complete shopping experience with product browsing, advanced filtering, secure checkout with Stripe integration, and comprehensive order management. The admin dashboard provides powerful tools for inventory management, order processing, and analytics.

Key technical highlights include server-side rendering for optimal performance, TypeScript for type safety, Tailwind CSS for responsive design, and a robust authentication system. The application is fully responsive and optimized for both desktop and mobile experiences.`,
    image:
      "/placeholder.svg?height=400&width=800&text=E-Commerce+Platform+Hero",
    technologies: [
      "Next.js 15",
      "TypeScript",
      "Tailwind CSS",
      "Stripe",
      "Prisma",
      "PostgreSQL",
    ],
    category: "Web Development",
    liveUrl: "https://example-ecommerce.vercel.app",
    githubUrl: "https://github.com/example/ecommerce-platform",
    createdAt: "2024-01-15",
    author: "ASAAN HAI CODING Team",
    gallery: [
      "/placeholder.svg?height=300&width=500&text=Homepage+Design",
      "/placeholder.svg?height=300&width=500&text=Product+Page",
      "/placeholder.svg?height=300&width=500&text=Shopping+Cart",
      "/placeholder.svg?height=300&width=500&text=Admin+Dashboard",
    ],
    features: [
      "User Authentication & Authorization",
      "Product Catalog with Advanced Filtering",
      "Shopping Cart & Wishlist",
      "Secure Payment Processing with Stripe",
      "Order Management System",
      "Admin Dashboard with Analytics",
      "Responsive Design",
      "SEO Optimized",
    ],
  },
};

interface ProjectPageProps {
  params: {
    slug: string;
  };
}

export default function ProjectPage({ params }: ProjectPageProps) {
  const project = projects[params.slug as keyof typeof projects];

  if (!project) {
    notFound();
  }

  return (
    <div className="min-h-screen py-20 px-4 sm:px-6 lg:px-8">
      <div className="max-w-6xl mx-auto">
        {/* Back Button */}
        <div className="mb-8">
          <Button
            asChild
            variant="outline"
            className="border-slate-600 hover:bg-slate-800"
          >
            <Link href="/projects" className="flex items-center space-x-2">
              <ArrowLeft className="h-4 w-4" />
              <span>Back to Projects</span>
            </Link>
          </Button>
        </div>

        {/* Hero Section */}
        <div className="mb-12">
          <div className="relative overflow-hidden rounded-xl mb-8">
            <Image
              src={project.image || "/placeholder.svg"}
              alt={project.title}
              width={800}
              height={400}
              className="w-full h-[400px] object-cover"
            />
            <div className="absolute inset-0 bg-gradient-to-t from-slate-900/80 to-transparent"></div>
          </div>

          <div className="space-y-6">
            <div className="flex items-center space-x-4 text-sm text-slate-400">
              <div className="flex items-center space-x-1">
                <Calendar className="h-4 w-4" />
                <span>{new Date(project.createdAt).toLocaleDateString()}</span>
              </div>
              <div className="flex items-center space-x-1">
                <User className="h-4 w-4" />
                <span>{project.author}</span>
              </div>
              <Badge className="bg-blue-600 hover:bg-blue-700">
                {project.category}
              </Badge>
            </div>

            <h1 className="text-4xl sm:text-5xl font-bold">
              <span className="bg-gradient-to-r from-blue-400 to-purple-400 bg-clip-text text-transparent">
                {project.title}
              </span>
            </h1>

            <p className="text-xl text-slate-300 leading-relaxed">
              {project.description}
            </p>

            <div className="flex flex-wrap gap-3">
              <Button asChild className="bg-blue-600 hover:bg-blue-700">
                <Link
                  href={project.liveUrl}
                  target="_blank"
                  rel="noopener noreferrer"
                  className="flex items-center space-x-2"
                >
                  <ExternalLink className="h-4 w-4" />
                  <span>View Live Site</span>
                </Link>
              </Button>
              <Button
                asChild
                variant="outline"
                className="border-slate-600 hover:bg-slate-800"
              >
                <Link
                  href={project.githubUrl}
                  target="_blank"
                  rel="noopener noreferrer"
                  className="flex items-center space-x-2"
                >
                  <Github className="h-4 w-4" />
                  <span>View Source Code</span>
                </Link>
              </Button>
            </div>
          </div>
        </div>

        {/* Content Grid */}
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-12">
          {/* Main Content */}
          <div className="lg:col-span-2 space-y-12">
            {/* Description */}
            <Card className="bg-slate-900/50 border-slate-800">
              <CardContent className="p-8">
                <h2 className="text-2xl font-bold mb-6 text-white">
                  Project Overview
                </h2>
                <div className="prose prose-invert max-w-none">
                  {project.longDescription
                    .split("\n\n")
                    .map((paragraph, index) => (
                      <p
                        key={index}
                        className="text-slate-300 leading-relaxed mb-4"
                      >
                        {paragraph}
                      </p>
                    ))}
                </div>
              </CardContent>
            </Card>

            {/* Gallery */}
            <Card className="bg-slate-900/50 border-slate-800">
              <CardContent className="p-8">
                <h2 className="text-2xl font-bold mb-6 text-white">
                  Project Gallery
                </h2>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  {project.gallery.map((image, index) => (
                    <div
                      key={index}
                      className="relative overflow-hidden rounded-lg"
                    >
                      <Image
                        src={image || "/placeholder.svg"}
                        alt={`${project.title} screenshot ${index + 1}`}
                        width={500}
                        height={300}
                        className="w-full h-48 object-cover hover:scale-105 transition-transform duration-300"
                      />
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          </div>

          {/* Sidebar */}
          <div className="space-y-8">
            {/* Technologies */}
            <Card className="bg-slate-900/50 border-slate-800">
              <CardContent className="p-6">
                <h3 className="text-xl font-bold mb-4 text-white">
                  Technologies Used
                </h3>
                <div className="flex flex-wrap gap-2">
                  {project.technologies.map((tech) => (
                    <Badge
                      key={tech}
                      variant="secondary"
                      className="bg-slate-800 text-slate-300"
                    >
                      {tech}
                    </Badge>
                  ))}
                </div>
              </CardContent>
            </Card>

            {/* Features */}
            <Card className="bg-slate-900/50 border-slate-800">
              <CardContent className="p-6">
                <h3 className="text-xl font-bold mb-4 text-white">
                  Key Features
                </h3>
                <ul className="space-y-2">
                  {project.features.map((feature, index) => (
                    <li
                      key={index}
                      className="flex items-start space-x-2 text-slate-300"
                    >
                      <div className="w-2 h-2 bg-blue-500 rounded-full mt-2 flex-shrink-0"></div>
                      <span>{feature}</span>
                    </li>
                  ))}
                </ul>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
    </div>
  );
}

===== END ./src/app/projects/[slug]/page.tsx =====

===== BEGIN ./src/app/projects/page.tsx =====
"use client";

import { useState } from "react";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { ExternalLink, Github, Filter } from "lucide-react";
import Link from "next/link";
import Image from "next/image";

const categories = [
  "All",
  "Web Development",
  "Mobile App",
  "Python",
  "Next.js",
  "Frontend",
  "Backend",
];

const projects = [
  {
    id: 1,
    title: "E-Commerce Platform",
    description:
      "A full-stack e-commerce solution built with Next.js, featuring user authentication, payment integration, and admin dashboard.",
    image: "/placeholder.svg?height=200&width=300&text=E-Commerce+Platform",
    technologies: ["Next.js", "TypeScript", "Tailwind CSS", "Stripe"],
    category: "Web Development",
    liveUrl: "#",
    githubUrl: "#",
    slug: "ecommerce-platform",
  },
  {
    id: 2,
    title: "Task Management App",
    description:
      "A collaborative task management application with real-time updates, drag-and-drop functionality, and team collaboration features.",
    image: "/placeholder.svg?height=200&width=300&text=Task+Management+App",
    technologies: ["React", "Node.js", "Socket.io", "MongoDB"],
    category: "Web Development",
    liveUrl: "#",
    githubUrl: "#",
    slug: "task-management-app",
  },
  {
    id: 3,
    title: "Weather Dashboard",
    description:
      "A beautiful weather dashboard with location-based forecasts, interactive maps, and detailed weather analytics.",
    image: "/placeholder.svg?height=200&width=300&text=Weather+Dashboard",
    technologies: ["Vue.js", "Python", "FastAPI", "Chart.js"],
    category: "Python",
    liveUrl: "#",
    githubUrl: "#",
    slug: "weather-dashboard",
  },
  {
    id: 4,
    title: "Mobile Banking App",
    description:
      "A secure mobile banking application with biometric authentication, transaction history, and budget tracking.",
    image: "/placeholder.svg?height=200&width=300&text=Mobile+Banking+App",
    technologies: ["React Native", "TypeScript", "Firebase", "Expo"],
    category: "Mobile App",
    liveUrl: "#",
    githubUrl: "#",
    slug: "mobile-banking-app",
  },
  {
    id: 5,
    title: "Portfolio Website",
    description:
      "A modern, responsive portfolio website showcasing projects and skills with smooth animations and dark mode support.",
    image: "/placeholder.svg?height=200&width=300&text=Portfolio+Website",
    technologies: ["Next.js", "Framer Motion", "Tailwind CSS"],
    category: "Frontend",
    liveUrl: "#",
    githubUrl: "#",
    slug: "portfolio-website",
  },
  {
    id: 6,
    title: "API Gateway Service",
    description:
      "A scalable API gateway service with rate limiting, authentication, and request/response transformation capabilities.",
    image: "/placeholder.svg?height=200&width=300&text=API+Gateway+Service",
    technologies: ["Node.js", "Express", "Redis", "Docker"],
    category: "Backend",
    liveUrl: "#",
    githubUrl: "#",
    slug: "api-gateway-service",
  },
];

export default function ProjectsPage() {
  const [selectedCategory, setSelectedCategory] = useState("All");

  const filteredProjects =
    selectedCategory === "All"
      ? projects
      : projects.filter((project) => project.category === selectedCategory);

  return (
    <div className="min-h-screen py-20 px-4 sm:px-6 lg:px-8">
      <div className="max-w-7xl mx-auto">
        {/* Header */}
        <div className="text-center mb-16">
          <h1 className="text-4xl sm:text-5xl font-bold mb-4">
            <span className="bg-gradient-to-r from-blue-400 to-purple-400 bg-clip-text text-transparent">
              Our Projects
            </span>
          </h1>
          <p className="text-xl text-slate-400 max-w-3xl mx-auto">
            Explore our comprehensive collection of projects spanning web
            development, mobile apps, and innovative solutions built with modern
            technologies.
          </p>
        </div>

        {/* Filter Bar */}
        <div className="mb-12">
          <div className="flex items-center justify-center mb-6">
            <Filter className="h-5 w-5 text-slate-400 mr-2" />
            <span className="text-slate-400 font-medium">
              Filter by category:
            </span>
          </div>
          <div className="flex flex-wrap justify-center gap-3">
            {categories.map((category) => (
              <Button
                key={category}
                variant={selectedCategory === category ? "default" : "outline"}
                onClick={() => setSelectedCategory(category)}
                className={
                  selectedCategory === category
                    ? "bg-blue-600 hover:bg-blue-700"
                    : "border-slate-600 hover:bg-slate-800"
                }
              >
                {category}
              </Button>
            ))}
          </div>
        </div>

        {/* Projects Grid */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
          {filteredProjects.map((project) => (
            <Card
              key={project.id}
              className="bg-slate-900/50 border-slate-800 hover:border-slate-700 transition-all duration-300 group"
            >
              <div className="relative overflow-hidden rounded-t-lg">
                <Image
                  src={project.image || "/placeholder.svg"}
                  alt={project.title}
                  width={300}
                  height={200}
                  className="w-full h-48 object-cover group-hover:scale-105 transition-transform duration-300"
                />
                <div className="absolute top-4 left-4">
                  <Badge className="bg-blue-600 hover:bg-blue-700">
                    {project.category}
                  </Badge>
                </div>
              </div>

              <CardHeader>
                <CardTitle className="text-white group-hover:text-blue-400 transition-colors">
                  {project.title}
                </CardTitle>
                <CardDescription className="text-slate-400">
                  {project.description}
                </CardDescription>
              </CardHeader>

              <CardContent className="space-y-4">
                <div className="flex flex-wrap gap-2">
                  {project.technologies.map((tech) => (
                    <Badge
                      key={tech}
                      variant="secondary"
                      className="bg-slate-800 text-slate-300"
                    >
                      {tech}
                    </Badge>
                  ))}
                </div>

                <div className="flex items-center justify-between">
                  <div className="flex space-x-2">
                    <Button
                      size="sm"
                      variant="outline"
                      className="border-slate-600 hover:bg-slate-800"
                    >
                      <ExternalLink className="h-4 w-4 mr-1" />
                      Live
                    </Button>
                    <Button
                      size="sm"
                      variant="outline"
                      className="border-slate-600 hover:bg-slate-800"
                    >
                      <Github className="h-4 w-4 mr-1" />
                      Code
                    </Button>
                  </div>
                  <Button
                    asChild
                    size="sm"
                    className="bg-blue-600 hover:bg-blue-700"
                  >
                    <Link href={`/projects/${project.slug}`}>Details</Link>
                  </Button>
                </div>
              </CardContent>
            </Card>
          ))}
        </div>

        {filteredProjects.length === 0 && (
          <div className="text-center py-20">
            <p className="text-xl text-slate-400">
              No projects found in this category.
            </p>
          </div>
        )}
      </div>
    </div>
  );
}

===== END ./src/app/projects/page.tsx =====

===== BEGIN ./src/app/page.tsx =====
import Hero from "@/components/Hero";
import TopProjects from "@/components/TopProjects";
import TopTutorials from "@/components/TopTutorials";
import ContactSection from "@/components/ContactSection";

export default function Home() {
  return (
    <div className="space-y-20">
      <Hero />
      <TopProjects />
      <TopTutorials />
      <ContactSection />
    </div>
  );
}

===== END ./src/app/page.tsx =====

===== BEGIN ./src/app/not-found.tsx =====
import Link from "next/link";
import { Button } from "@/components/ui/button";
import { Home, ArrowLeft } from "lucide-react";

export default function NotFound() {
  return (
    <div className="min-h-screen flex items-center justify-center px-4">
      <div className="text-center space-y-8 max-w-md">
        <div className="space-y-4">
          <h1 className="text-8xl font-bold bg-gradient-to-r from-blue-400 to-purple-400 bg-clip-text text-transparent">
            404
          </h1>
          <h2 className="text-2xl font-bold text-white">Page Not Found</h2>
          <p className="text-slate-400">
            Sorry, we couldn&apos;t find the page you&apos;re looking for. It
            might have been moved or doesn&apos;t exist.
          </p>
        </div>

        <div className="flex flex-col sm:flex-row gap-4 justify-center">
          <Button asChild className="bg-blue-600 hover:bg-blue-700">
            <Link href="/" className="flex items-center space-x-2">
              <Home className="h-4 w-4" />
              <span>Go Home</span>
            </Link>
          </Button>
          <Button
            asChild
            variant="outline"
            className="border-slate-600 hover:bg-slate-800"
          >
            <Link
              href="javascript:history.back()"
              className="flex items-center space-x-2"
            >
              <ArrowLeft className="h-4 w-4" />
              <span>Go Back</span>
            </Link>
          </Button>
        </div>
      </div>
    </div>
  );
}

===== END ./src/app/not-found.tsx =====

===== BEGIN ./tsconfig.json =====
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules", "src/components/ui"]
}

===== END ./tsconfig.json =====

